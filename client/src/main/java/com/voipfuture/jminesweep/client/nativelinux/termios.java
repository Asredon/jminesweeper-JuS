// Generated by jextract

package com.voipfuture.jminesweep.client.nativelinux;

import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SegmentScope;
import java.lang.foreign.StructLayout;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct termios {
 *     tcflag_t c_iflag;
 *     tcflag_t c_oflag;
 *     tcflag_t c_cflag;
 *     tcflag_t c_lflag;
 *     cc_t c_line;
 *     cc_t c_cc[32];
 *     speed_t c_ispeed;
 *     speed_t c_ospeed;
 * };
 * }
 */
public class termios {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("c_iflag"),
        Constants$root.C_INT$LAYOUT.withName("c_oflag"),
        Constants$root.C_INT$LAYOUT.withName("c_cflag"),
        Constants$root.C_INT$LAYOUT.withName("c_lflag"),
        Constants$root.C_CHAR$LAYOUT.withName("c_line"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("c_cc"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_INT$LAYOUT.withName("c_ispeed"),
        Constants$root.C_INT$LAYOUT.withName("c_ospeed")
    ).withName("termios");
    public static MemoryLayout $LAYOUT() {
        return termios.$struct$LAYOUT;
    }
    static final VarHandle c_iflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_iflag"));
    public static VarHandle c_iflag$VH() {
        return termios.c_iflag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * tcflag_t c_iflag;
     * }
     */
    public static int c_iflag$get(MemorySegment seg) {
        return (int)termios.c_iflag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * tcflag_t c_iflag;
     * }
     */
    public static void c_iflag$set(MemorySegment seg, int x) {
        termios.c_iflag$VH.set(seg, x);
    }
    public static int c_iflag$get(MemorySegment seg, long index) {
        return (int)termios.c_iflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_iflag$set(MemorySegment seg, long index, int x) {
        termios.c_iflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_oflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_oflag"));
    public static VarHandle c_oflag$VH() {
        return termios.c_oflag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * tcflag_t c_oflag;
     * }
     */
    public static int c_oflag$get(MemorySegment seg) {
        return (int)termios.c_oflag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * tcflag_t c_oflag;
     * }
     */
    public static void c_oflag$set(MemorySegment seg, int x) {
        termios.c_oflag$VH.set(seg, x);
    }
    public static int c_oflag$get(MemorySegment seg, long index) {
        return (int)termios.c_oflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_oflag$set(MemorySegment seg, long index, int x) {
        termios.c_oflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_cflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_cflag"));
    public static VarHandle c_cflag$VH() {
        return termios.c_cflag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * tcflag_t c_cflag;
     * }
     */
    public static int c_cflag$get(MemorySegment seg) {
        return (int)termios.c_cflag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * tcflag_t c_cflag;
     * }
     */
    public static void c_cflag$set(MemorySegment seg, int x) {
        termios.c_cflag$VH.set(seg, x);
    }
    public static int c_cflag$get(MemorySegment seg, long index) {
        return (int)termios.c_cflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_cflag$set(MemorySegment seg, long index, int x) {
        termios.c_cflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_lflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_lflag"));
    public static VarHandle c_lflag$VH() {
        return termios.c_lflag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * tcflag_t c_lflag;
     * }
     */
    public static int c_lflag$get(MemorySegment seg) {
        return (int)termios.c_lflag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * tcflag_t c_lflag;
     * }
     */
    public static void c_lflag$set(MemorySegment seg, int x) {
        termios.c_lflag$VH.set(seg, x);
    }
    public static int c_lflag$get(MemorySegment seg, long index) {
        return (int)termios.c_lflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_lflag$set(MemorySegment seg, long index, int x) {
        termios.c_lflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_line$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_line"));
    public static VarHandle c_line$VH() {
        return termios.c_line$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * cc_t c_line;
     * }
     */
    public static byte c_line$get(MemorySegment seg) {
        return (byte)termios.c_line$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * cc_t c_line;
     * }
     */
    public static void c_line$set(MemorySegment seg, byte x) {
        termios.c_line$VH.set(seg, x);
    }
    public static byte c_line$get(MemorySegment seg, long index) {
        return (byte)termios.c_line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_line$set(MemorySegment seg, long index, byte x) {
        termios.c_line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment c_cc$slice(MemorySegment seg) {
        return seg.asSlice(17, 32);
    }
    static final VarHandle c_ispeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_ispeed"));
    public static VarHandle c_ispeed$VH() {
        return termios.c_ispeed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * speed_t c_ispeed;
     * }
     */
    public static int c_ispeed$get(MemorySegment seg) {
        return (int)termios.c_ispeed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * speed_t c_ispeed;
     * }
     */
    public static void c_ispeed$set(MemorySegment seg, int x) {
        termios.c_ispeed$VH.set(seg, x);
    }
    public static int c_ispeed$get(MemorySegment seg, long index) {
        return (int)termios.c_ispeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_ispeed$set(MemorySegment seg, long index, int x) {
        termios.c_ispeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_ospeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_ospeed"));
    public static VarHandle c_ospeed$VH() {
        return termios.c_ospeed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * speed_t c_ospeed;
     * }
     */
    public static int c_ospeed$get(MemorySegment seg) {
        return (int)termios.c_ospeed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * speed_t c_ospeed;
     * }
     */
    public static void c_ospeed$set(MemorySegment seg, int x) {
        termios.c_ospeed$VH.set(seg, x);
    }
    public static int c_ospeed$get(MemorySegment seg, long index) {
        return (int)termios.c_ospeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_ospeed$set(MemorySegment seg, long index, int x) {
        termios.c_ospeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


